# this for testing a User Data Script on a Server in a Public subnet
Resources:

  VPC: 
      Type: AWS::EC2::VPC
      Properties:
          CidrBlock: 10.0.0.0/16
          EnableDnsHostnames: true

  InternetGateway:
      Type: AWS::EC2::InternetGateway
      Properties:
          Tags:
              - Key: Name
                Value: Internet GW 

  InternetGatewayAttachment:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties:
          InternetGatewayId: !Ref InternetGateway
          VpcId: !Ref VPC

  PublicSubnet1: 
      Type: AWS::EC2::Subnet
      Properties:
          VpcId: !Ref VPC
          AvailabilityZone: 'us-east-1a'
          CidrBlock: 10.0.1.0/24
          MapPublicIpOnLaunch: true
          Tags: 
              - Key: Name 
                Value: Public Subnet (AZ1)

  PublicRouteTable:
      Type: AWS::EC2::RouteTable
      Properties: 
          VpcId: !Ref VPC
          Tags: 
              - Key: Name 
                Value: !Sub Public Routes Table

  PublicRoute1: 
      Type: AWS::EC2::Route
      DependsOn: InternetGatewayAttachment
      Properties: 
          RouteTableId: !Ref PublicRouteTable
          DestinationCidrBlock: 0.0.0.0/0
          GatewayId: !Ref InternetGateway  

  PublicSubnet1RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
          RouteTableId: !Ref PublicRouteTable
          SubnetId: !Ref PublicSubnet1

  #Need to create policy , as there is no default policy for S3 access
  EC2S3AccessPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
        PolicyDocument:
            Version: '2012-10-17'
            Statement:
                - Sid: "EC2S3Access"
                  Effect: "Allow"
                  Action:
                      - "s3:Get*"
                  Resource: "*" 

  S3BucketIAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
        AssumeRolePolicyDocument:
            Version: "2012-10-17"
            Statement:
                - Effect: "Allow"
                  Principal:
                      Service:
                          - "ec2.amazonaws.com"
                  Action:
                  - 'sts:AssumeRole'
        ManagedPolicyArns:
          - !Ref EC2S3AccessPolicy

#instace profile contains the IAM Role name(s) that we want to associate to our auto scaling EC2 Servers
  ProfileWithRolesForOurApp:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      Roles: 
        - !Ref S3BucketIAMRole
  WebServerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: Allow http to our hosts and SSH from local only
      SecurityGroupEgress: 
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress: 
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0 
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VPC

# Server EC2 Instance
  ServerInstance: 
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t3.medium
      ImageId: ami-0747bdcabd34c712a
      IamInstanceProfile: !Ref ProfileWithRolesForOurApp
      NetworkInterfaces: 
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet: 
            - Ref: "WebServerSecGroup"
          SubnetId: 
            Ref: "PublicSubnet1"
      KeyName: test
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update -y
          apt-get install unzip awscli -y
          apt-get install apache2 -y
          systemctl start apache2.service
          cd /var/www/html
          aws s3 cp s3://remonbucket/index.html .

        ## To cp file from s3 bucket using the S3 URI
        # aws s3 cp s3://remonbucket/index.html .
        # Below is To create the index file on the server for test in public subnet
        # echo "Test Server is Up and Running!" > index.html